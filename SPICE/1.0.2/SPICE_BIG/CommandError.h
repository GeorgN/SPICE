/**
	SPICE BIG
	CommandError.h
	Purpose: An error which can be generated by a command.

	@author Lukas Mueller (ilt.hsr.ch)
	@version 1.0 2015_10_21
*/

#ifndef COMMANDERROR_H
#define COMMANDERROR_H

#include <string>
#include <vector>

#include "ContinuationTask.h"

namespace SPICE
{
	namespace BIG
	{
		class CommandError
		{
		public:
			/**
				The CommandError can be generated by a command in case of an error. UserInteractionTimeout won't be used and AutomaticAfterTimeout will be FALSE.

				@param errorMessage Human readable message about the error
			*/
			CommandError(std::string errorMessage);
			/**
				The CommandError can be generated by a command in case of an error. UserInteractionTimeout will be used and AutomaticAfterTimeout will be TRUE.

				@param errorMessage Human readable message about the error
				@param userInteractionTimeout Timeout for user interaction in seconds
			*/
			CommandError(std::string errorMessage, double userInteractionTimeout);
			/**
				The CommandError can be generated by a command in case of an error. UserInteractionTimeout won't be used and AutomaticAfterTimeout will be FALSE.

				@param errorMessage Human readable message about the error
				@param taskName Name of the first task (default)
				@param taskDescription Human readable task description
				@param taskType Type of the continuation task. Influences the impact to the state machine if this task is selected.
			*/
			CommandError(std::string errorMessage, std::string taskName, std::string taskDescription, ContinuationTask::TaskTypes taskType);
			/**
				The CommandError can be generated by a command in case of an error. UserInteractionTimeout will be used and AutomaticAfterTimeout will be TRUE.

				@param errorMessage Human readable message about the error
				@param userInteractionTimeout Timeout for user interaction in seconds
				@param taskName Name of the first task (default)
				@param taskDescription Human readable task description
				@param taskType Type of the continuation task. Influences the impact to the state machine if this task is selected.
			*/
			CommandError(std::string errorMessage, double userInteractionTimeout, std::string taskName, std::string taskDescription, ContinuationTask::TaskTypes taskType);
			virtual ~CommandError(void);

			/**
				To add a continuation task. Multiple tasks can be added. The first will be the default task.

				@param name Name of the task
				@param description Human readable task description
				@param type Type of the continuation task. Influences the impact to the state machine if this task is selected.
				@return Returns false if already a continuation task with this name exists.
			*/
			bool addContinuationTask(std::string name, std::string description, ContinuationTask::TaskTypes type);

			/**
				Returns the error as XML continuation task parameter according to the SiLA DCDIS 1.3.08

				@return The XML continuation task parameter as XML-String
			*/
			std::string getXMLContinuationTaskParameter();

			/**
				Will be true if there is a continuation task of type "continueTask" or if there are more then one continuations tasks

				@return Returns true if error is recoverable
			*/
			bool isRecoverable();
			/**
				Returns the count of added continuation tasks

				@return Count of continuation tasks
			*/
			unsigned int getContTasksCount();
			/**
				Returns the error message of the CommandError

				@return Error message
			*/
			std::string getErrorMessage();

			/**
				Sets the selected contiuation task by the taskName.

				@param taskName Name of the the task to select
			*/
			void setSelectedTask(std::string taskName);
			/**
				Returns the name of the selected task

				@return Name of the selected task
			*/
			std::string getSelectedTaskName();
			/**
				Returns the type of the selected task

				@return Type of the selected task
			*/
			ContinuationTask::TaskTypes getSelectedTaskType();
			/**
				Sets the default task as selected task
			*/
			void setDefaultTaskAsSelectedTask();

		private:
			bool _isRecoverable;
			std::string _errorMessage;

			bool _automaticAfterTimeout;
			double _userInteractionTimeout;

			std::vector<ContinuationTask> _continuationTasks;
			std::string _selectedTaskName;
			ContinuationTask::TaskTypes _selectedTaskType;
		};
	}
}

#endif // COMMANDERROR_H
